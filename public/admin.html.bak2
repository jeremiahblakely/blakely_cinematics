<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Blakely Cinematics</title>
    <meta name="description" content="Admin control center for Blakely Cinematics gallery management">
    
    <!-- Stylesheets -->
    <link rel="stylesheet" href="/css/styles.css?v=20250828">
    <link rel="stylesheet" href="/assets/css/admin-overrides.css">
    
    <!-- AWS CloudWatch RUM Analytics -->
    <script>
      (function(n,i,v,r,s,c,x,z){x=window.AwsRumClient={q:[],n:i,i:i,v:v,r:r,c:c};window[n]=function(c,p){x.q.push({c:c,p:p});};z=document.createElement('script');z.async=true;z.src=s;document.head.insertBefore(z,document.head.getElementsByTagName('script')[0]);})(
        'cwr',
        '1a163e06-eb6a-4131-bdb1-6e27fbb0799c',
        '1.0.0',
        'us-east-1',
        'https://client.rum.us-east-1.amazonaws.com/1.19.0/cwr.js',
        {
          sessionSampleRate: 1 ,
          endpoint: "https://dataplane.rum.us-east-1.amazonaws.com" ,
          telemetries: ["performance","errors","http"] ,
          allowCookies: true ,
          enableXRay: false ,
          signing: true
        }
      );
    </script>
</head>
<body class="admin-page">
    <!-- Custom Cursor -->
    <div class="cursor"></div>
    <div class="cursor-follower"></div>
    
    <!-- BEGIN ADMIN-HEADER -->
    `cat /tmp/canon_header.html`
    <!-- END ADMIN-HEADER -->
    
    <!-- Admin Dashboard -->
    <main class="admin-dashboard">
        
        <!-- Section 1: Active Galleries -->
        <section class="admin-section active-galleries">
            <div class="section-header">
                <h2 class="section-title">Active Galleries</h2>
                <div class="section-actions">
                    <button class="refresh-btn admin-btn-secondary" id="refresh-galleries-btn" title="Refresh galleries">
                        üîÑ Refresh
                    </button>
                    <span class="section-count">3 galleries</span>
                </div>
            </div>
            
            <div class="galleries-table">
                <div class="table-header">
                    <span>Client Name</span>
                    <span>Session Type</span>
                    <span>Upload Date</span>
                    <span>Images</span>
                    <span>Actions</span>
                </div>
                
                <div class="table-row" data-gallery-code="DEMO2025" data-gallery-id="1">
                    <span class="client-name">Demo Client</span>
                    <span class="session-type">Headshots</span>
                    <span class="upload-date">Today</span>
                    <span class="image-count">24 images</span>
                    <div class="table-actions">
                        <button class="action-btn view-btn" data-action="view">View</button>
                        <button class="action-btn edit-btn" data-action="edit">Edit</button>
                        <button class="action-btn delete-btn" data-action="delete">Delete</button>
                    </div>
                </div>
                
                <div class="table-row" data-gallery-code="TEST-AUG-2025" data-gallery-id="2">
                    <span class="client-name">Test Client</span>
                    <span class="session-type">Creative</span>
                    <span class="upload-date">Today</span>
                    <span class="image-count">12 images</span>
                    <div class="table-actions">
                        <button class="action-btn view-btn" data-action="view">View</button>
                        <button class="action-btn edit-btn" data-action="edit">Edit</button>
                        <button class="action-btn delete-btn" data-action="delete">Delete</button>
                    </div>
                </div>
                
                <div class="table-row" data-gallery-code="SAMPLE-AUG-2025" data-gallery-id="3">
                    <span class="client-name">Sample Gallery</span>
                    <span class="session-type">Portrait</span>
                    <span class="upload-date">Yesterday</span>
                    <span class="image-count">8 images</span>
                    <div class="table-actions">
                        <button class="action-btn view-btn" data-action="view">View</button>
                        <button class="action-btn edit-btn" data-action="edit">Edit</button>
                        <button class="action-btn delete-btn" data-action="delete">Delete</button>
                    </div>
                </div>
            </div>
        </section>
        
        <!-- Section 2: Create New Gallery -->
        <section class="admin-section create-gallery">
            <div class="section-header">
                <h2 class="section-title">Create New Gallery</h2>
            </div>
            
            <div class="create-gallery-form">
                <div class="form-grid">
                    <div class="form-group">
                        <input type="text" id="client-name" name="client_name" placeholder="Enter client full name" required>
                    </div>
                    
                    <div class="form-group">
                        <select id="session-type" name="session_type" required>
                            <option value="">Select session type</option>
                            <option value="headshots">Headshots</option>
                            <option value="creative">Creative</option>
                            <option value="portrait">Portrait</option>
                        </select>
                    </div>
                    
                    <div class="form-group gallery-code-group">
                        <input type="text" id="gallery-code" name="gallery_code" placeholder="Auto-generated gallery code" readonly>
                        <button type="button" class="generate-code-btn">Generate New</button>
                    </div>
                    
                    <div class="form-group">
                        <input type="text" id="gallery-password" name="password" placeholder="Enter secure password" required>
                    </div>
                    
                    <div class="form-group">
                        <input type="date" id="expiration-date" name="expiration_date" required>
                    </div>
                </div>
                
                <div class="upload-section">
                    <div class="upload-zone" id="upload-zone">
                        <div class="upload-icon">üìÅ</div>
                        <h3>Drag & Drop Images Here</h3>
                        <p>Or click to browse files</p>
                        <input type="file" id="file-input" multiple accept="image/*" style="display: none;">
                    </div>
                    <div class="upload-status" id="upload-status"></div>
                </div>
                
                <button type="submit" class="create-gallery-btn admin-btn-primary" id="create-gallery-btn">
                    Create Gallery
                </button>
            </div>
        </section>
        
        <!-- Section 3: Quick Stats -->
        <section class="admin-section quick-stats">
            <div class="section-header">
                <h2 class="section-title">Quick Stats</h2>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-number">12</div>
                    <div class="stat-label">Active Galleries</div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number">487</div>
                    <div class="stat-label">Total Images</div>
                </div>
                
                <div class="stat-card">
                    <div class="stat-number">2.3 GB</div>
                    <div class="stat-label">Storage Used</div>
                </div>
            </div>
            
            <div class="recent-activity">
                <h3>Recent Activity</h3>
                <div class="activity-list">
                    <div class="activity-item">
                        <span class="activity-time">2 hours ago</span>
                        <span class="activity-text">Sarah Johnson viewed gallery (3 images downloaded)</span>
                    </div>
                    <div class="activity-item">
                        <span class="activity-time">5 hours ago</span>
                        <span class="activity-text">Marcus Rodriguez viewed gallery</span>
                    </div>
                    <div class="activity-item">
                        <span class="activity-time">1 day ago</span>
                        <span class="activity-text">Emma Chen gallery created</span>
                    </div>
                    <div class="activity-item">
                        <span class="activity-time">2 days ago</span>
                        <span class="activity-text">Alex Turner viewed gallery (12 images downloaded)</span>
                    </div>
                    <div class="activity-item">
                        <span class="activity-time">3 days ago</span>
                        <span class="activity-text">Lisa Wang gallery expired and archived</span>
                    </div>
                </div>
            </div>
        </section>
        
    </main>
    
    <!-- Admin Footer -->
    <footer class="admin-footer">
        <div class="footer-container">
            <p>&copy; 2024 Blakely Cinematics Admin Panel | Secure gallery management system</p>
        </div>
    </footer>
    
    <!-- JavaScript -->
    <script>
        // Admin Authentication Check - Must be at the very top
        (function() {
            const isAuthenticated = sessionStorage.getItem('adminAuthenticated');
            const loginTime = sessionStorage.getItem('adminLoginTime');
            const currentTime = Date.now();
            const sessionTimeout = 4 * 60 * 60 * 1000; // 4 hours in milliseconds
            
            // Check if admin is authenticated and session hasn't expired
            if (!isAuthenticated || !loginTime || (currentTime - parseInt(loginTime)) > sessionTimeout) {
                console.log('üö´ Admin access denied - redirecting to login');
                sessionStorage.removeItem('adminAuthenticated');
                sessionStorage.removeItem('adminLoginTime');
                window.location.href = 'admin-login.html';
                return;
            }
            
            console.log('‚úÖ Admin authenticated - access granted');
        })();
        
        class AdminDashboard {
            constructor() {
                this.selectedFiles = [];
                this.init();
            }
            
            init() {
                this.bindEvents();
                this.generateDefaultCode();
                this.setDefaultExpirationDate();
            }
            
            bindEvents() {
                // Gallery actions
                document.addEventListener('click', (e) => {
                    if (e.target.classList.contains('action-btn')) {
                        this.handleGalleryAction(e.target);
                    }
                });
                
                // Client name input - auto-generate gallery code
                document.getElementById('client-name').addEventListener('input', (e) => {
                    this.generateGalleryCode(e.target.value);
                });
                
                // Generate new code button
                document.querySelector('.generate-code-btn').addEventListener('click', (e) => {
                    this.addButtonFeedback(e.target);
                    const clientName = document.getElementById('client-name').value;
                    this.generateGalleryCode(clientName, true);
                });
                
                // Refresh galleries button
                document.getElementById('refresh-galleries-btn').addEventListener('click', (e) => {
                    this.refreshGalleries(e.target);
                });
                
                // File upload drag and drop
                this.initDragDrop();
                
                // Create gallery form
                document.getElementById('create-gallery-btn').addEventListener('click', (e) => {
                    e.preventDefault();
                    this.createGallery();
                });
            }
            
            handleGalleryAction(button) {
                const action = button.dataset.action;
                const row = button.closest('.table-row');
                const galleryId = row.dataset.galleryId;
                const galleryCode = row.dataset.galleryCode;
                const clientName = row.querySelector('.client-name').textContent;
                
                console.log(`üîß Admin Action: ${action.toUpperCase()} - Gallery: ${galleryCode} (${clientName})`);
                
                switch(action) {
                    case 'view':
                        alert(`Opening gallery view for ${clientName} (${galleryCode})`);
                        break;
                    case 'edit':
                        alert(`Opening gallery editor for ${clientName} (${galleryCode})`);
                        break;
                    case 'delete':
                        this.deleteGallery(galleryCode, button);
                        break;
                }
            }
            
            async deleteGallery(galleryCode, deleteButton) {
                const DELETE_API_URL = 'https://4l12h6snuh.execute-api.us-east-1.amazonaws.com/delete-gallery';
                const row = deleteButton.closest('.table-row');
                const clientName = row.querySelector('.client-name').textContent;
                
                // Confirmation dialog
                if (!confirm(`Are you sure you want to delete gallery ${galleryCode}?\n\nThis will permanently remove all images and cannot be undone.\n\nClient: ${clientName}`)) {
                    return;
                }
                
                console.log(`üóëÔ∏è Deleting gallery: ${galleryCode}`);
                
                // Add loading state to all buttons in row
                const allButtons = row.querySelectorAll('.action-btn');
                const originalStates = [];
                
                allButtons.forEach(btn => {
                    originalStates.push({
                        text: btn.textContent,
                        disabled: btn.disabled
                    });
                    btn.disabled = true;
                });
                
                // Special styling for delete button
                deleteButton.textContent = 'Deleting...';
                deleteButton.style.background = '#DC2626';
                
                try {
                    // Send delete request to API
                    const response = await fetch(DELETE_API_URL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            galleryCode: galleryCode
                        })
                    });
                    
                    const data = await response.json();
                    console.log('üóëÔ∏è Delete API Response:', data);
                    
                    if (data.success || response.ok) {
                        console.log(`‚úÖ Successfully deleted gallery: ${galleryCode}`);
                        
                        // Show success message
                        this.showDeleteMessage(`Gallery "${galleryCode}" deleted successfully`, 'success');
                        
                        // Animate row removal
                        row.style.transition = 'all 0.5s ease';
                        row.style.opacity = '0';
                        row.style.transform = 'translateX(-20px)';
                        
                        setTimeout(() => {
                            row.remove();
                            this.updateGalleryCount();
                        }, 500);
                        
                    } else {
                        throw new Error(data.error || 'Delete operation failed');
                    }
                    
                } catch (error) {
                    console.error('üö® Delete error:', error);
                    this.showDeleteMessage(`Failed to delete gallery: ${error.message}`, 'error');
                    
                    // Restore button states on error
                    allButtons.forEach((btn, index) => {
                        btn.textContent = originalStates[index].text;
                        btn.disabled = originalStates[index].disabled;
                    });
                    
                    deleteButton.style.background = '';
                }
            }
            
            showDeleteMessage(message, type) {
                // Find or create message container
                let messageContainer = document.querySelector('.admin-message-container');
                if (!messageContainer) {
                    messageContainer = document.createElement('div');
                    messageContainer.className = 'admin-message-container';
                    messageContainer.style.cssText = `
                        position: fixed;
                        top: 100px;
                        right: 20px;
                        z-index: 10000;
                        max-width: 400px;
                    `;
                    document.body.appendChild(messageContainer);
                }
                
                // Create message element
                const messageEl = document.createElement('div');
                messageEl.className = `admin-message ${type}`;
                messageEl.style.cssText = `
                    padding: 1rem 1.5rem;
                    margin-bottom: 0.5rem;
                    border-radius: 8px;
                    font-weight: 500;
                    animation: slideInRight 0.3s ease;
                    ${type === 'success' ? 'background: rgba(34, 197, 94, 0.1); color: #22C55E; border: 1px solid rgba(34, 197, 94, 0.3);' : ''}
                    ${type === 'error' ? 'background: rgba(239, 68, 68, 0.1); color: #EF4444; border: 1px solid rgba(239, 68, 68, 0.3);' : ''}
                `;
                messageEl.textContent = message;
                
                messageContainer.appendChild(messageEl);
                
                // Remove message after 4 seconds
                setTimeout(() => {
                    messageEl.style.animation = 'slideOutRight 0.3s ease';
                    setTimeout(() => {
                        messageEl.remove();
                    }, 300);
                }, 4000);
            }
            
            updateGalleryCount() {
                const galleryRows = document.querySelectorAll('.table-row').length;
                const sectionCount = document.querySelector('.section-count');
                if (sectionCount) {
                    sectionCount.textContent = `${galleryRows} galleries`;
                }
            }
            
            async refreshGalleries(button) {
                console.log('üîÑ Refreshing galleries...');
                
                // Add loading state
                button.disabled = true;
                button.classList.add('loading');
                const originalText = button.innerHTML;
                button.innerHTML = '‚è≥ Refreshing...';
                
                try {
                    // Show loading message
                    const sectionCount = document.querySelector('.section-count');
                    sectionCount.textContent = 'Refreshing...';
                    sectionCount.style.color = '#f59e0b';
                    
                    // Simulate API call (1 second delay)
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    
                    // In the future, this would fetch from DynamoDB
                    // const galleries = await this.fetchGalleriesFromAPI();
                    
                    // For now, simulate refresh with current data
                    const galleryCount = document.querySelectorAll('.table-row').length;
                    sectionCount.textContent = `${galleryCount} galleries`;
                    sectionCount.style.color = '';
                    
                    // Show success message briefly
                    sectionCount.textContent = '‚úÖ Refreshed!';
                    sectionCount.style.color = '#10b981';
                    
                    setTimeout(() => {
                        sectionCount.textContent = `${galleryCount} galleries`;
                        sectionCount.style.color = '';
                    }, 2000);
                    
                    console.log('‚úÖ Galleries refreshed successfully');
                    
                } catch (error) {
                    console.error('üö® Refresh failed:', error);
                    const sectionCount = document.querySelector('.section-count');
                    sectionCount.textContent = '‚ùå Refresh failed';
                    sectionCount.style.color = '#ef4444';
                    
                    setTimeout(() => {
                        const galleryCount = document.querySelectorAll('.table-row').length;
                        sectionCount.textContent = `${galleryCount} galleries`;
                        sectionCount.style.color = '';
                    }, 3000);
                } finally {
                    // Remove loading state
                    button.disabled = false;
                    button.classList.remove('loading');
                    button.innerHTML = originalText;
                }
            }
            
            addButtonFeedback(button) {
                // Add brief visual feedback for button clicks
                button.style.transform = 'scale(0.95)';
                setTimeout(() => {
                    button.style.transform = '';
                }, 150);
            }
            
            generateGalleryCode(clientName, forceNew = false) {
                if (!clientName.trim()) {
                    // Generate random code if no client name
                    const randomCode = 'BC-' + Math.random().toString(36).substring(2, 8).toUpperCase();
                    document.getElementById('gallery-code').value = randomCode;
                    console.log(`üîë Generated random gallery code: ${randomCode}`);
                    return;
                }
                
                const date = new Date();
                const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 
                               'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
                
                // Get last name (or first 4 characters if single name)
                const nameParts = clientName.trim().split(/\s+/);
                const lastName = nameParts.length > 1 ? nameParts[nameParts.length - 1] : nameParts[0];
                const cleanLastName = lastName.replace(/[^a-zA-Z]/g, '').toUpperCase();
                
                // Format: LASTNAME-MONTH-YEAR (e.g., "SMITH-AUG-2025")
                const month = months[date.getMonth()];
                const year = date.getFullYear();
                
                let baseCode = `${cleanLastName.slice(0, 8)}-${month}-${year}`;
                
                // Add random suffix if forced or for uniqueness
                if (forceNew) {
                    const randomSuffix = Math.random().toString(36).substring(2, 4).toUpperCase();
                    baseCode = `${cleanLastName.slice(0, 6)}-${month}-${year}-${randomSuffix}`;
                }
                
                document.getElementById('gallery-code').value = baseCode;
                console.log(`üîë Generated gallery code: ${baseCode}`);
            }
            
            setDefaultExpirationDate() {
                const date = new Date();
                date.setDate(date.getDate() + 90); // 90 days from today
                const formattedDate = date.toISOString().split('T')[0];
                document.getElementById('expiration-date').value = formattedDate;
            }
            
            initDragDrop() {
                const uploadZone = document.getElementById('upload-zone');
                const fileInput = document.getElementById('file-input');
                const uploadStatus = document.getElementById('upload-status');
                
                // Click to upload
                uploadZone.addEventListener('click', () => {
                    fileInput.click();
                });
                
                // File selection
                fileInput.addEventListener('change', (e) => {
                    this.handleFiles(e.target.files);
                });
                
                // Drag and drop events
                uploadZone.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    uploadZone.classList.add('drag-over');
                });
                
                uploadZone.addEventListener('dragleave', (e) => {
                    e.preventDefault();
                    uploadZone.classList.remove('drag-over');
                });
                
                uploadZone.addEventListener('drop', (e) => {
                    e.preventDefault();
                    uploadZone.classList.remove('drag-over');
                    this.handleFiles(e.dataTransfer.files);
                });
            }
            
            handleFiles(files) {
                const uploadStatus = document.getElementById('upload-status');
                const imageFiles = Array.from(files).filter(file => file.type.startsWith('image/'));
                
                if (imageFiles.length === 0) {
                    uploadStatus.innerHTML = '<p class="error">Please select only image files.</p>';
                    return;
                }
                
                // Store files for later upload
                this.selectedFiles = imageFiles;
                
                console.log(`üì§ Files selected for upload: ${imageFiles.length} images`);
                imageFiles.forEach(file => {
                    console.log(`  - ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`);
                });
                
                uploadStatus.innerHTML = `
                    <p class="success">${imageFiles.length} images ready for upload</p>
                    <div class="file-list">
                        ${imageFiles.map(file => `<span class="file-name">${file.name}</span>`).join('')}
                    </div>
                `;
            }
            
            async convertToBase64(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result);
                    reader.onerror = reject;
                    reader.readAsDataURL(file);
                });
            }
            
            async uploadImagesToAPI(galleryCode, files) {
                const UPLOAD_API_URL = 'https://4l12h6snuh.execute-api.us-east-1.amazonaws.com/upload';
                const uploadStatus = document.getElementById('upload-status');
                
                try {
                    // Show upload progress
                    uploadStatus.innerHTML = `
                        <div class="upload-progress">
                            <p>Converting images to base64...</p>
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: 0%"></div>
                            </div>
                            <div class="upload-details"></div>
                        </div>
                    `;
                    
                    // Convert all files to base64
                    const images = [];
                    for (let i = 0; i < files.length; i++) {
                        const file = files[i];
                        const progressFill = document.querySelector('.progress-fill');
                        const uploadDetails = document.querySelector('.upload-details');
                        
                        progressFill.style.width = `${((i + 1) / files.length) * 50}%`;
                        uploadDetails.innerHTML = `Converting ${file.name}... (${i + 1}/${files.length})`;
                        
                        const base64Content = await this.convertToBase64(file);
                        images.push({
                            fileName: file.name,
                            content: base64Content
                        });
                    }
                    
                    // Upload to API
                    uploadStatus.querySelector('p').textContent = 'Uploading images to S3...';
                    const progressFill = document.querySelector('.progress-fill');
                    const uploadDetails = document.querySelector('.upload-details');
                    
                    progressFill.style.width = '75%';
                    uploadDetails.innerHTML = `Uploading ${images.length} images to gallery: ${galleryCode}`;
                    
                    const response = await fetch(UPLOAD_API_URL, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            galleryCode: galleryCode,
                            images: images
                        })
                    });
                    
                    const data = await response.json();
                    console.log('üì° Upload API Response:', data);
                    
                    progressFill.style.width = '100%';
                    
                    if (data.success) {
                        const successCount = data.results ? data.results.filter(r => r.success).length : images.length;
                        const failCount = data.results ? data.results.filter(r => !r.success).length : 0;
                        
                        uploadStatus.innerHTML = `
                            <div class="upload-success">
                                <p class="success">‚úÖ Upload Complete!</p>
                                <div class="upload-results">
                                    <p>Successfully uploaded: <strong>${successCount} images</strong></p>
                                    ${failCount > 0 ? `<p class="error">Failed: ${failCount} images</p>` : ''}
                                    <p>Gallery Code: <strong>${galleryCode}</strong></p>
                                </div>
                                ${data.results ? `
                                    <div class="detailed-results">
                                        ${data.results.map(result => `
                                            <div class="result-item ${result.success ? 'success' : 'error'}">
                                                ${result.success ? '‚úÖ' : '‚ùå'} ${result.fileName || 'Unknown'}
                                                ${result.error ? ` - ${result.error}` : ''}
                                            </div>
                                        `).join('')}
                                    </div>
                                ` : ''}
                            </div>
                        `;
                    } else {
                        throw new Error(data.error || 'Upload failed');
                    }
                    
                } catch (error) {
                    console.error('üö® Upload error:', error);
                    uploadStatus.innerHTML = `
                        <div class="upload-error">
                            <p class="error">‚ùå Upload Failed</p>
                            <p>Error: ${error.message}</p>
                            <p>Please check the console for more details and try again.</p>
                        </div>
                    `;
                }
            }
            
            async createGallery() {
                const formData = {
                    clientName: document.getElementById('client-name').value,
                    sessionType: document.getElementById('session-type').value,
                    galleryCode: document.getElementById('gallery-code').value,
                    password: document.getElementById('gallery-password').value,
                    expirationDate: document.getElementById('expiration-date').value
                };
                
                // Basic validation
                if (!formData.clientName || !formData.sessionType || !formData.password) {
                    alert('Please fill in all required fields.');
                    return;
                }
                
                // Check if files are selected for upload
                if (!this.selectedFiles || this.selectedFiles.length === 0) {
                    const proceed = confirm(`No images selected for upload. Create gallery "${formData.galleryCode}" without images?`);
                    if (!proceed) return;
                }
                
                console.log('üöÄ Creating new gallery with data:', formData);
                
                // Disable create button during upload
                const createBtn = document.getElementById('create-gallery-btn');
                const originalText = createBtn.textContent;
                createBtn.disabled = true;
                createBtn.textContent = 'Creating Gallery...';
                
                try {
                    // If files are selected, upload them
                    if (this.selectedFiles && this.selectedFiles.length > 0) {
                        console.log(`üì§ Uploading ${this.selectedFiles.length} images to gallery ${formData.galleryCode}`);
                        await this.uploadImagesToAPI(formData.galleryCode, this.selectedFiles);
                        
                        // Success message with upload confirmation
                        alert(`Gallery created successfully for ${formData.clientName}!\n\n` + 
                              `Gallery Code: ${formData.galleryCode}\n` + 
                              `Password: ${formData.password}\n` + 
                              `Images Uploaded: ${this.selectedFiles.length}\n\n` + 
                              `Share these credentials with your client.`);
                    } else {
                        // Success message without upload
                        alert(`Gallery created successfully for ${formData.clientName}!\n\n` + 
                              `Gallery Code: ${formData.galleryCode}\n` + 
                              `Password: ${formData.password}\n\n` + 
                              `Share these credentials with your client.`);
                    }
                    
                    // Reset form
                    this.resetForm();
                    
                } catch (error) {
                    console.error('üö® Gallery creation error:', error);
                    alert(`Error creating gallery: ${error.message}`);
                } finally {
                    // Re-enable create button
                    createBtn.disabled = false;
                    createBtn.textContent = originalText;
                }
            }
            
            resetForm() {
                document.getElementById('client-name').value = '';
                document.getElementById('session-type').value = '';
                document.getElementById('gallery-code').value = '';
                document.getElementById('gallery-password').value = '';
                document.getElementById('upload-status').innerHTML = '';
                document.getElementById('file-input').value = '';
                this.selectedFiles = [];
                this.setDefaultExpirationDate();
                this.generateDefaultCode();
            }
            
            generateDefaultCode() {
                // Generate a default code for demo
                this.generateGalleryCode('Sample Client');
            }
        }
        
        // Initialize admin dashboard
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize custom cursor and other components
            if (typeof initCustomCursor === 'function') {
                initCustomCursor();
            }
            
            // Initialize admin dashboard
            new AdminDashboard();
        });
        
        // Admin Sign Out Function
        function adminSignOut(event) {
            event.preventDefault();
            console.log('üö™ Admin signing out - clearing authentication');
            
            // Clear admin authentication
            sessionStorage.removeItem('adminAuthenticated');
            sessionStorage.removeItem('adminLoginTime');
            
            // Redirect to main site
            window.location.href = 'index.html';
        }
    </script>
    
    <!-- Load main script for shared functionality -->
    <script src="/js/script.js?v=20250828"></script>
    
    <script>
    (function(){
        var links = document.querySelectorAll('#header-tabs a');
        if (!links.length) return;
        var page = location.pathname.split('/').pop() || 'admin.html';
        links.forEach(function(a){
            if (a.getAttribute('href') === page) a.classList.add('active');
        });
    })();
    </script>
</body>
</html>
